# multiconn-server.py

import sys
import socket
import selectors
import types

sel = selectors.DefaultSelector()

G = {}
host, port = '127.0.0.1', 4444
lsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
lsock.bind((host, port))
lsock.listen()
print(f"Listening on {(host, port)}")
lsock.setblocking(False)
sel.register(lsock, selectors.EVENT_READ, data=None)

def accept_wrapper(sock):
    conn, addr = sock.accept()  # Should be ready to read
    print(f"Accepted connection from {addr}")
    conn.setblocking(False)
    data = types.SimpleNamespace(addr=addr, inb=b"", outb=b"")
    events = selectors.EVENT_READ | selectors.EVENT_WRITE
    sel.register(conn, events, data=data)



def service_connection(key, mask):
    sock = key.fileobj
    data = key.data
    if len(data.outb) == 0:
        sent = sock.send("Salute! Enter your name")
        data.outb = data.outb[sent:]
    if mask & selectors.EVENT_READ:
        recv_data = sock.recv(1024)  # Should be ready to read
        if recv_data == '1':
            sent = sock.send(list(G.keys()))
            data.outb = data.outb[sent:]
        elif recv_data[0] == '2':
            G[recv_data[1]].outb += bytes(recv_data[2])
        elif recv_data:
            G[recv_data] = data
        else:
            print(f"Closing connection to {data.addr}")
            sel.unregister(sock)
            sock.close()



try:
    while True:
        events = sel.select(timeout=None)
        for key, mask in events:
            if key.data is None:
                accept_wrapper(key.fileobj)
            else:
                service_connection(key, mask)
except KeyboardInterrupt:
    print("Caught keyboard interrupt, exiting")
finally:
    sel.close()
